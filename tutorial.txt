1.Создание необходимой проектной директории: локально(на моем компьютере) и удаленно(на githube).

2. Переходим в созданную диреторию(папку).
- команда перехода по папкам : cd(название папки)
- шаг назад cd ..
- перемещение по диску : название диска : (например, C:)

3. Создание вирутального окружения.
- python -m venv venv(последнее venv название моего окружения)

4. Активация\деактивация виртуальной среды.
- перехожу в папку Scripts
- venv\Scripts\activate
- отключение виртуальной среды : \deactivate

5. Создаю необходимые файлы: .gitignore, requirements.txt, README.md.

6. В файл .giignore помещаю следующие файлы: venv/, .idea/, db.sqlite3.

7. Создаю файл с необходимыми библеотеками(зависимости).
- pip freeze > requirements.txt
внутри файла лежат зависимости и их версии.

8. С помощью команды git init установил связь между локальным(моим компьютером) и удаленным(github) репозиторием.

9. Создали проект с использованием фреймфорка Django с помощью команды: django-admin startproject myportfolio_app . .

(myportfolio_app - это имя проекта, его можно менять)
точка в конце команды, позволит установить локально в папку, не создавая еще одну в таким же именем( проекта),
использовании команды без точки не будет ошибкой.

Выполнив команду по запуска проекта, у нас появится папка, внутри которой будет вложенная папка, с файлами пакета
конфигураций.
Вложенная папка : Это и есть конфигурационная папка проекта, где расположены основные настройки Django.
Файлы вложенной папки конфигурации:

1 - __init__.py:
Это пустой файл, который обозначает, что данная директория является Python-пакетом. Благодаря этому Python может
импортировать модули из этой папки.

2 - settings.py:
Основной файл настроек проекта.

3 - urls.py:
Здесь задается маршрутизация (URLs) проекта.
Содержит таблицу маршрутов, связывающих URL-адреса с соответствующими представлениями (views)

4 - wsgi.py:
Файл для настройки WSGI (Web Server Gateway Interface).
Используется для развертывания проекта на веб-серверах, таких как Gunicorn или uWSGI.

5 - asgi.py:
Файл для настройки ASGI (Asynchronous Server Gateway Interface).
Используется для запуска асинхронных приложений Django.
Применяется при использовании серверов, поддерживающих асинхронные запросы, например, Daphne или Uvicorn.

10. Переходим в папку с названием проекта MyPortfolio(используем cd), ту самую где уже есть папка с конфигурациями
(настройками Django).

11. Запускаем наш сервер вебсервер с помощтю команды: python manage.py runserver.
файл manage.py - важный инструмент в управлении проектом, через него мы запускаем сервер, применяем миграции, создаем
приложения, выполняем пользовательские команды (написаные нами в ходе работы над проектом).

12. После чего выполняться первые миграции, в терминале мы получим вывод информации об использовании Django, а также
ссылку в браузер на наш вебсервер. На странице в браузере, при корректном запуске увидим ракету и вывод информации:
The install worked successfully! Congratulations!

http://127.0.0.1:8000/ , разбирая эту строку в браузере стоит отметить:
- тип протокола http
- адрес локального хоста  127.0.0.1
- порт :8000, при запуске, после слова runserver, можно указать другой порт и страница будет отображена иначе(редко делают).

После запуска сервера, Django создаст файл БД, а именно db.sqlite3, он работает по умолчанию с нашим фреймворком, менять
БД на другую, конечно же можно!

13. Создадим приложение, которое будет отвечать за функционал портфолио(например, отображение проектов, статей и т.д.)
с помощтю команды: python manage.py startapp myportfolio(myportfolio - имя приложения)

14. В файле settings.py в папке проекта в коллекции INSTALLED_APPS, в конец списка вносим название приложения в виде
строковом формате для регистрации приложения, после его реализации.
- myportfolio_app.apps.MyportfolioAppConfig

15. Сделали добавление, коммит, пуш на github с помощью команд: git add ., git commit -m " ", git push origin feature.